
R version 3.5.2 (2018-12-20) -- "Eggshell Igloo"
Copyright (C) 2018 The R Foundation for Statistical Computing
Platform: x86_64-apple-darwin15.6.0 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "binomial"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> base::assign(".ExTimings", "binomial-Ex.timings", pos = 'CheckExEnv')
> base::cat("name\tuser\tsystem\telapsed\n", file=base::get(".ExTimings", pos = 'CheckExEnv'))
> base::assign(".format_ptime",
+ function(x) {
+   if(!is.na(x[4L])) x[1L] <- x[1L] + x[4L]
+   if(!is.na(x[5L])) x[2L] <- x[2L] + x[5L]
+   options(OutDec = '.')
+   format(x[1L:3L], digits = 7L)
+ },
+ pos = 'CheckExEnv')
> 
> ### * </HEADER>
> library('binomial')
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> base::assign(".old_wd", base::getwd(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("bin_choose")
> ### * bin_choose
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: bin_choose
> ### Title: bin_choose
> ### Aliases: bin_choose
> 
> ### ** Examples
> 
> # 5 choose 2
> bin_choose(n = 5, k = 2)
[1] 10
> # 5 choose 1,5 choose 2,5 choose 3
> bin_choose(5, 1:3)
[1]  5 10 10
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("bin_choose", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("bin_cumulative")
> ### * bin_cumulative
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: bin_cumulative
> ### Title: bin_cumulative
> ### Aliases: bin_cumulative
> 
> ### ** Examples
> 
> #binomial cumulative distribution
> bin_cumulative(trials = 5, prob = 0.5)
  success probability cumulative
1       0     0.03125    0.03125
2       1     0.15625    0.18750
3       2     0.31250    0.50000
4       3     0.31250    0.81250
5       4     0.15625    0.96875
6       5     0.03125    1.00000
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("bin_cumulative", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("bin_distribution")
> ### * bin_distribution
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: bin_distribution
> ### Title: bin_distribution
> ### Aliases: bin_distribution
> 
> ### ** Examples
> 
> # binomial probability distribution
> bin_distribution(trials = 5, prob = 0.5)
  success probability
1       0     0.03125
2       1     0.15625
3       2     0.31250
4       3     0.31250
5       4     0.15625
6       5     0.03125
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("bin_distribution", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("bin_probability")
> ### * bin_probability
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: bin_probability
> ### Title: bin_probability
> ### Aliases: bin_probability
> 
> ### ** Examples
> 
> 
> # probability of getting 2 successes in 5 trials
> # (assuming prob of success = 0.5)
> bin_probability(success = 2, trials = 5, prob = 0.5)
[1] 0.3125
> # probabilities of getting 2 or less successes in 5 trials
> # (assuming prob of success = 0.5)
> bin_probability(success = 0:2, trials = 5, prob = 0.5)
[1] 0.03125 0.15625 0.31250
> #55 heads in 100 tosses of a loaded coin with 45% chance of heads
> bin_probability(success = 55, trials = 100, prob = 0.45)
[1] 0.01075277
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("bin_probability", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> ### * <FOOTER>
> ###
> cleanEx()
> options(digits = 7L)
> base::cat("Time elapsed: ", proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  0.131 0.017 0.155 0 0 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
